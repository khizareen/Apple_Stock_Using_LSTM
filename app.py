# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MwUeyCXYDif_UGD5QrrFoN4wKARniLys
"""

# app.py

import streamlit as st
import pandas as pd
import numpy as np
from tensorflow.keras.models import load_model
from sklearn.preprocessing import MinMaxScaler
import matplotlib.pyplot as plt

# Set Streamlit page configuration
st.set_page_config(page_title="LSTM Stock Forecast", layout="wide")

st.title("ðŸ“ˆ LSTM Stock Price Forecasting App")
st.markdown("This app uses a trained LSTM model to forecast the next 7 days of Apple stock prices.")

# Load data
@st.cache_data
def load_data():
    df = pd.read_csv("AAPL.csv")
    df['Date'] = pd.to_datetime(df['Date'])
    df.set_index('Date', inplace=True)
    return df[['Close']]

data = load_data()

# Show data
st.subheader("Historical Closing Prices")
st.line_chart(data)

# Load LSTM model
model = load_model("lstm_apple_stock_model.h5")

# Preprocess data
scaler = MinMaxScaler()
scaled_data = scaler.fit_transform(data)

# Prepare last sequence
lookback = 60
last_sequence = scaled_data[-lookback:]
forecast = []

for _ in range(7):
    next_pred = model.predict(last_sequence.reshape(1, lookback, 1), verbose=0)
    forecast.append(next_pred[0, 0])
    last_sequence = np.append(last_sequence[1:], [[next_pred]], axis=0)

# Inverse transform to original scale
forecast_original = scaler.inverse_transform(np.array(forecast).reshape(-1, 1))

# Create forecast dataframe
future_dates = pd.date_range(start=data.index[-1] + pd.Timedelta(days=1), periods=7)
forecast_df = pd.DataFrame({'Date': future_dates, 'Predicted Close': forecast_original.flatten()})
forecast_df.set_index('Date', inplace=True)

# Display forecast
st.subheader("ðŸ“Š Next 7-Day Forecast")
st.dataframe(forecast_df)

# Plot forecast
st.subheader("ðŸ“‰ Forecast Plot")
plt.figure(figsize=(10, 5))
plt.plot(forecast_df.index, forecast_df['Predicted Close'], marker='o', linestyle='-')
plt.title("LSTM Forecast: Next 7 Days")
plt.xlabel("Date")
plt.ylabel("Predicted Close Price")
plt.grid(True)
st.pyplot(plt)